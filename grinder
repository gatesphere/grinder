#!/usr/bin/env python

import re
import os.path
import pickle
import sys
import traceback

grinder_gold = 0
grinder_unlocked_libs = []
grinder_errors = ''
grinder_stats_file = '.stats.grinder'
source = ''
def read_grinder_stats():
  global grinder_gold, grinder_unlocked_libs
  if os.path.exists(grinder_stats_file):
    f = open(grinder_stats_file, 'r')
    c = pickle.load(f)
    f.close()
    grinder_gold, grinder_unlocked_libs = c[0], c[1]

def write_grinder_stats():
  f = open(grinder_stats_file, 'w')
  pickle.dump((grinder_gold, grinder_unlocked_libs), f)
  f.close()


def print_grinder_stats():
  print "Your grinder stats:"
  print "Gold: %d" % grinder_gold
  print "Unlocked modules:"
  for lib in grinder_unlocked_libs:
    print "  %s" % lib

def run_grinder_shop():
  pass

def get_program_imports(line):
  imports = []
  if line.startswith('import'):
    x = map(lambda x: x.strip().split(' as ',1)[0], line[7:].split(','))
    imports = x
  elif line.startswith('from'):
    imports.append(line.split(" ")[1].strip())
  elif "__import__" in line:
    pos = line.find("__import__(")+11
    s = line[pos:]
    oquote = s[0]
    s = s[1:s[1:].find(oquote)+1]
    imports.append(s)
  return imports

def check_grinder_program(prog):
  global source, grinder_unlocked_libs, grinder_errors
  valid = True
  with open(prog) as f:
    source_lines = f.readlines()
    
    # check imports for any locked libraries
    # if any found, fill grinder_errors with
    # appropriate information, return False
    # else, populate grinder_source with the
    # proper info, return True
    for line in source_lines:
      l = line.strip()
      if len(l.split('#',1)[0]) == 0:
        # ignore comments
        continue
      if l.startswith("import") or l.startswith("from") or "__import__" in l:
        # there's an import here somewhere!
        imports = get_program_imports(l)
        for imp in imports:
          if imp not in grinder_unlocked_libs:
            valid = False
            grinder_errors += "Error! Module %s not unlocked!\n" % imp
      source = source + line
  
  return valid

def run_grinder_program():
  global source, grinder_gold
  try:
    exec(source)
    grinder_gold += len(source)
  except Exception as e:
    print "Error running program!\n  "
    print e
    grinder_gold -= len(source)
    if grinder_gold < 0:
      grinder_gold = 0

def print_grinder_errors():
  global grinder_errors
  print grinder_errors

if __name__ == "__main__":
  read_grinder_stats()
  arg = sys.argv[1]
  if arg == "shop":
    run_grinder_shop()
  elif arg == "stats":
    print_grinder_stats()
  elif arg == "cheat":
    grinder_gold += 1000;
    write_grinder_stats()
  else:
    if check_grinder_program(arg):
      run_grinder_program()
      write_grinder_stats()
    else:
      print_grinder_errors()
