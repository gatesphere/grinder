#--unknown-language--@+leo-ver=4-thin
#--unknown-language--@+node:peckj.20130206111755.1371:@shadow grinder
#--unknown-language--@@color
#--unknown-language--@@language python
#--unknown-language--@@tabwidth -2
#!/usr/bin/env python

#--unknown-language--@<< imports >>
#--unknown-language--@+node:peckj.20130206111755.1377:<< imports >>
import sys
import os.path
import pickle

grinder_gold = 0
grinder_unlocked_libs = []
grinder_errors = ''
grinder_stats_file = '.stats.grinder'
source = ''

grinder_version = '20130206'

#--unknown-language--@-node:peckj.20130206111755.1377:<< imports >>
#--unknown-language--@nl
#--unknown-language--@+others
#--unknown-language--@+node:peckj.20130206111755.1386:grinder stats
#--unknown-language--@-node:peckj.20130206111755.1386:grinder stats
#--unknown-language--@+node:peckj.20130206111755.1379:read_grinder_stats()
def read_grinder_stats():
  global grinder_gold, grinder_unlocked_libs
  if os.path.exists(grinder_stats_file):
    f = open(grinder_stats_file, 'r')
    c = pickle.load(f)
    f.close()
    grinder_gold, grinder_unlocked_libs = c[0], c[1]

#--unknown-language--@-node:peckj.20130206111755.1379:read_grinder_stats()
#--unknown-language--@+node:peckj.20130206111755.1384:write_grinder_stats()
def write_grinder_stats():
  f = open(grinder_stats_file, 'w')
  pickle.dump((grinder_gold, grinder_unlocked_libs), f)
  f.close()

#--unknown-language--@-node:peckj.20130206111755.1384:write_grinder_stats()
#--unknown-language--@+node:peckj.20130206111755.1385:print_grinder_stats()
def print_grinder_stats():
  print "Your grinder stats:"
  print "Gold: %d" % grinder_gold
  print "Unlocked modules:"
  for lib in grinder_unlocked_libs:
    print "  %s" % lib

#--unknown-language--@-node:peckj.20130206111755.1385:print_grinder_stats()
#--unknown-language--@+node:peckj.20130206111755.1390:grinder shop
#--unknown-language--@-node:peckj.20130206111755.1390:grinder shop
#--unknown-language--@+node:peckj.20130206111755.1383:run_grinder_shop()
def run_grinder_shop():
  print_grinder_shop_heading()
  loop = True
  while(loop):
    loop = do_grinder_shopping()
  print_grinder_shop_farewell()

#--unknown-language--@-node:peckj.20130206111755.1383:run_grinder_shop()
#--unknown-language--@+node:peckj.20130206111755.1391:print_grinder_shop_heading()
def print_grinder_shop_heading():
  print "Welcome to the Grinder shop!"

#--unknown-language--@-node:peckj.20130206111755.1391:print_grinder_shop_heading()
#--unknown-language--@+node:peckj.20130206111755.1393:do_grinder_shopping()
def do_grinder_shopping():
  global grinder_gold, grinder_unlocked_libs
  print_grinder_stats()
  if grinder_gold < 500:
    print "You can't afford anything at the moment... come back when you have at least 500 Gold!"
    return False
  print "Commands that can be entered below:"
  print "  b modulename"
  print "    -> unlocks modulename -- costs 500 gold"
  print "  q"
  print "    -> quits shopping"
  cmd = raw_input("command?> ").strip()
  if cmd == "q":
    return False
  elif cmd.startswith("b ") and len(cmd) > 2:
    moduletounlock = cmd[2:]
    confirm = raw_input("purchase module %s? (y/n)> " % moduletounlock).strip()
    if confirm == 'y':
      grinder_unlocked_libs.append(moduletounlock)
      grinder_gold -= 500
      print "purchased module %s" % moduletounlock
  return True

#--unknown-language--@-node:peckj.20130206111755.1393:do_grinder_shopping()
#--unknown-language--@+node:peckj.20130206111755.1392:print_grinder_shop_farewell()
def print_grinder_shop_farewell():
  print "Bye!"

#--unknown-language--@-node:peckj.20130206111755.1392:print_grinder_shop_farewell()
#--unknown-language--@+node:peckj.20130206111755.1394:grinder run
#--unknown-language--@-node:peckj.20130206111755.1394:grinder run
#--unknown-language--@+node:peckj.20130206111755.1389:get_program_imports()
def get_program_imports(line):
  imports = []
  if line.startswith('import'):
    x = map(lambda x: x.strip().split(' as ',1)[0], line[7:].split(','))
    imports = x
  elif line.startswith('from'):
    imports.append(line.split(" ")[1].strip())
  elif "__import__" in line:
    pos = line.find("__import__(")+11
    s = line[pos:]
    oquote = s[0]
    s = s[1:s[1:].find(oquote)+1]
    imports.append(s)
  return imports

#--unknown-language--@-node:peckj.20130206111755.1389:get_program_imports()
#--unknown-language--@+node:peckj.20130206111755.1380:check_grinder_program()
def check_grinder_program(prog):
  global source, grinder_unlocked_libs, grinder_errors
  valid = True
  with open(prog) as f:
    source_lines = f.readlines()
    
    # check imports for any locked libraries
    # if any found, fill grinder_errors with
    # appropriate information, return False
    # else, populate grinder_source with the
    # proper info, return True
    for line in source_lines:
      l = line.strip()
      if len(l.split('#',1)[0]) == 0:
        # ignore comments
        continue
      if l.startswith("import") or l.startswith("from") or "__import__" in l:
        # there's an import here somewhere!
        imports = get_program_imports(l)
        for imp in imports:
          if imp not in grinder_unlocked_libs:
            valid = False
            grinder_errors += "Error! Module %s not unlocked!\n" % imp
      source = source + line
  return valid

#--unknown-language--@-node:peckj.20130206111755.1380:check_grinder_program()
#--unknown-language--@+node:peckj.20130206111755.1381:run_grinder_program()
def run_grinder_program():
  global source, grinder_gold
  try:
    exec(source)
    grinder_gold += len(source)
  except Exception as e:
    print "Error running program!\n  "
    print e
    grinder_gold -= len(source)
    if grinder_gold < 0:
      grinder_gold = 0

#--unknown-language--@-node:peckj.20130206111755.1381:run_grinder_program()
#--unknown-language--@+node:peckj.20130206111755.1382:print_grinder_errors()
def print_grinder_errors():
  global grinder_errors
  print grinder_errors

#--unknown-language--@-node:peckj.20130206111755.1382:print_grinder_errors()
#--unknown-language--@+node:peckj.20130206111755.1395:grinder help
#--unknown-language--@-node:peckj.20130206111755.1395:grinder help
#--unknown-language--@+node:peckj.20130206111755.1396:print_grinder_help()
def print_grinder_help():
  print '''
Grinder is used as follows
  ./grinder myprogram.py
    -> runs myprogram.py if all the imports are unlocked
  ./grinder stats
    -> prints your Gold and unlocked imports
  ./grinder shop
    -> opens up the shop to spend your Gold on unlocking imports
  ./grinder cheat
    -> allows you to cheat - gives you 1000 Gold
  ./grinder help
    -> prints this help info
  ./grinder about
    -> prints some version and author info
'''

#--unknown-language--@-node:peckj.20130206111755.1396:print_grinder_help()
#--unknown-language--@+node:peckj.20130206111755.1397:print_grinder_about()
def print_grinder_about():
  global grinder_version
  print "Grinder, version %s" % grinder_version
  print "Jacob Peck"
  print "https://github.com/gatesphere/grinder"

#--unknown-language--@-node:peckj.20130206111755.1397:print_grinder_about()
#--unknown-language--@+node:peckj.20130206111755.1378:__main__
if __name__ == "__main__":
  read_grinder_stats()
  if len(sys.argv) != 2:
    print_grinder_help()
    sys.exit()
  arg = sys.argv[1]
  if arg == "shop":
    run_grinder_shop()
    write_grinder_stats()
  elif arg == "stats":
    print_grinder_stats()
  elif arg == "cheat":
    grinder_gold += 1000;
    write_grinder_stats()
  elif arg == "help":
    print_grinder_help()
  elif arg == "about":
    print_grinder_about()
  else:
    if check_grinder_program(arg):
      run_grinder_program()
      write_grinder_stats()
    else:
      print_grinder_errors()
#--unknown-language--@nonl
#--unknown-language--@-node:peckj.20130206111755.1378:__main__
#--unknown-language--@-others
#--unknown-language--@-node:peckj.20130206111755.1371:@shadow grinder
#--unknown-language--@-leo
